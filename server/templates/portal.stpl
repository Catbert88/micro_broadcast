<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Micro Broadcast</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        h2 {
            color: #333;
        }
        table {
            width: 100%;
            max-width: 800px; /* Added max-width */
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        .broadcast-row td:first-child {
            font-weight: bold;
        }
        .divider-row td {
            display: flex;
            border: none;
            height: 10px;
            background-color: #f2f2f2;
        }
        input[type="text"] {
            width: 100%;
            box-sizing: border-box;
            padding: 5px;
        }
        button {
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            margin-right: 5px;
            white-space: nowrap; /* Prevent button text from wrapping */
        }
        button:hover {
            background-color: #45a049;
        }
        .add-time-btn {
            background-color: #008CBA;
        }
        .add-time-btn:hover {
            background-color: #007B9A;
        }
        .duration-cell {
            display: flex;
            align-items: center;
        }
        .duration-cell input {
            width: 40px;
            flex: 1;
            margin-right: 5px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        #messageInput {
            width: 100%;
            height: 100px;
            margin-bottom: 10px;
        }
        /* New styles for column widths */
        .id-column {
            width: 10%;
        }
        .message-column {
          width: 60%;
        }
        .action-column {
          width: 80px;
          text-align: center;
        }
        .add-time-column {
          width: 80px;
          text-align: center;
        }
        .current-column {
          width: 80px;
          text-align: center;
        }
        .animation-column {
            display: flex;
            width: 150px;
        }
        .animation-cell {
            margin-right: 5px;
            width: 150px;
            display: flex;
            align-items: center;
        }
        .animation-cell select {
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <h1>MB Control </h2>
    <h2>Messaging</h2>

    <table>
        <thead>
            <tr>
                <th class="id-column">ID</th>
                <th class="message-column">Message</th>
                <th class="action-column">Send</th>
            </tr>
        </thead>
        <tbody>
            <tr class="broadcast-row">
                <td class="id-column">Broadcast</td>
                <td class="message-column"><input type="text" id="BroadcastMessage" readonly value="" onclick="openModal(this)" /></td>
                <td class="action-column"><button onclick="sendMessage('Broadcast')">Send</button></td>
            </tr>
            <tr class="divider-row">
                <td colspan="3"></td>
            </tr>
            <% for worker in workers { %> 
            <tr>
              <td class="id-column"><%=worker.name()%></td>
              <td class="message-column"><input type="text" id="<%=worker.mac_address%>Message" readonly value="" onclick="openModal(this)" /></td>
              <td class="action-column"><button onclick="sendMessage('<%=worker.mac_address%>')">Send</button></td>
            </tr>
            <% } %>
        </tbody>
    </table>

    <h2>Timers</h2>

    <table>
        <thead>
            <tr>
                <th class="id-column">ID</th>
                <th>Duration (minutes)</th>
                <th class="add-time-column">Add Time</th>
                <th>Current</th>
            </tr>
        </thead>
        <tbody>
            <tr class="broadcast-row">
                <td class="id-column">Broadcast</td>
                <td class="duration-cell">
                    <input type="text" id="BroadcastTimerDuration" value="60" />
                    <button onclick="startTimer('Broadcast')">Start</button>
                </td>
                <td class="add-time-column"><button class="add-time-btn" onclick="AddTimer('Broadcast')">+5</button></td>
                <td></td>
            </tr>
            <tr class="divider-row">
                <td colspan="4"></td>
            </tr>
            <% for worker in workers { %> 
            <tr>
              <td class="id-column"><%=worker.name()%></td>
                <td class="duration-cell">
                    <input type="text" id="<%=worker.mac_address%>TimerDuration" value="60" />
                    <button onclick="startTimer('<%=worker.mac_address%>')">Start</button>
                </td>
                <td class="add-time-column"><button class="add-time-btn" onclick="AddTimer('<%=worker.mac_address%>')">+5</button></td>
                <td>00:00</td>
            </tr>
            <% } %>
        </tbody>
    </table>
    
    <h2>Animations</h2>
    
    <table>
        <thead>
            <tr>
                <th class="id-column">ID</th>
                <th class="animation-column">Animation</th>
            </tr>
        </thead>
        <tbody>
            <tr class="broadcast-row">
                <td class="id-column">Broadcast</td>
                <td class="animation-cell">
                    <select id="BroadcastAnimation">
                        <option>Cartoon Eyes</option>
                    </select>
                    <button onclick="startAnimation('Broadcast')">Start</button>
                </td>
            </tr>
            <tr class="divider-row">
                <td colspan="2"></td>
            </tr>
            <% for worker in workers { %> 
            <tr>
              <td class="id-column"><%=worker.name()%></td>
                <td class="animation-cell">
                  <select id="<%=worker.mac_address%>Animation">
                        <option>Cartoon Eyes</option>
                    </select>
                    <button onclick="startAnimation('<%=worker.mac_address%>')">Start</button>
                </td>
            </tr>
            <% } %>
        </tbody>
    </table>

    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <textarea id="messageInput"></textarea>
            <button onclick="saveMessage()">Update</button>
        </div>
    </div>

    <script>
        let currentMessagingInput;
        const modal = document.getElementById("messageModal");
        const messageInput = document.getElementById("messageInput");
        const span = document.getElementsByClassName("close")[0];

        function openModal(input) {
            currentMessagingInput = input;
            messageInput.value = input.value;
            modal.style.display = "block";
        }

        span.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        function saveMessage() {
            currentMessagingInput.value = messageInput.value;
            modal.style.display = "none";
        }

        function sendMessage(id) {
          const inputElement = document.getElementById(id + 'Message');
          const message = inputElement.value;

          fetch('/messaging', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: id,
              message: message
            }),
          })
            .then(response => response.json())
            .then(data => {
              console.log('Success:', data);
              alert('Message sent successfully!');
            })
            .catch((error) => {
              console.error('Error:', error);
              alert('Failed to send message. Please try again.');
            });
        }
        
        function startAnimation(id) {
            const inputElement = document.getElementById(id + 'Animation');
            const animation = inputElement.value;
            
            fetch('/animation', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: id,
                    animation: animation
                }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                alert('Animation started successfully!');
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('Failed to start animation. Please try again.');
            });
        }
        
        function startTimer(id) {
            const inputElement = document.getElementById(id + 'TimerDuration');
            const duration = inputElement.value;
            
            fetch('/timerStart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: id,
                    duration: duration
                }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                alert('Timer started successfully!');
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('Failed to start timer. Please try again.');
            });
        }
        
        function addTimer(id) {
            
            fetch('/timerAdd', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: id,
                    duration: 5
                }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
                alert('Time added successfully!');
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('Failed to add to timer. Please try again.');
            });
        }

    </script>
</body>
</html>
